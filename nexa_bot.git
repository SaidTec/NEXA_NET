import os
import telebot
import json
from telebot import types
from datetime import datetime

# ===== Config =====
BOT_TOKEN = os.environ.get("8443859419:AAGaZ4Nah52TurLvQ2NdINrxhbSiwXQKEi4")
if not BOT_TOKEN:
    raise ValueError("Please set the BOT_TOKEN environment variable!")

FORWARD_TARGET = "@nexanetofficial"
USERS_FILE = "users.json"
LOG_FILE = "forward_log.json"
MY_CHAT_ID = 7108127485  # Replace with your Telegram ID

bot = telebot.TeleBot(BOT_TOKEN)

# ===== Load/Save Users =====
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    else:
        data = {"admins": ["nexanetadmin"], "authorized": ["nexanetadmin"]}
        save_users(data)
        return data

def save_users(data):
    with open(USERS_FILE, "w") as f:
        json.dump(data, f)

users_data = load_users()
AUTHORIZED_USERS = users_data["authorized"]
ADMIN_USERS = users_data["admins"]

# ===== Load/Save Logs =====
def log_forward(sender, msg_type, content, timestamp):
    log_entry = {
        "sender": sender,
        "type": msg_type,
        "content": content,
        "timestamp": timestamp
    }
    logs = []
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            try:
                logs = json.load(f)
            except json.JSONDecodeError:
                logs = []
    logs.append(log_entry)
    with open(LOG_FILE, "w") as f:
        json.dump(logs, f, indent=2)

# ===== Keyboard Helper =====
def main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton('/help'),
        types.KeyboardButton('/status'),
        types.KeyboardButton('/configs'),
        types.KeyboardButton('/support'),
        types.KeyboardButton('/about'),
        types.KeyboardButton('/rules'),
        types.KeyboardButton('/donate')
    )
    return markup

# ===== Helper Functions =====
def is_admin(message):
    username = (message.from_user.username or "").lower()
    return username in [u.lower() for u in ADMIN_USERS]

def notify_admin(user, action_type, content=None):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    username = user.username or user.first_name
    user_id = user.id
    msg = f"üìå Bot Activity Alert\nUser: @{username} (ID: {user_id})\nAction: {action_type}\nTime: {timestamp}"
    if content:
        msg += f"\nContent: {content}"
    bot.send_message(MY_CHAT_ID, msg)

def forward_content(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    msg_type = message.content_type.capitalize()
    sender_name = message.from_user.username or message.from_user.first_name
    caption = f"From @{sender_name}\nType: {msg_type}\nTime: {timestamp}"

    try:
        if message.content_type == 'document':
            bot.send_document(FORWARD_TARGET, message.document.file_id, caption=caption)
            content = message.document.file_id
        elif message.content_type == 'photo':
            photo_id = message.photo[-1].file_id
            bot.send_photo(FORWARD_TARGET, photo_id, caption=caption)
            content = photo_id
        elif message.content_type == 'video':
            bot.send_video(FORWARD_TARGET, message.video.file_id, caption=caption)
            content = message.video.file_id
        elif message.content_type == 'voice':
            bot.send_voice(FORWARD_TARGET, message.voice.file_id, caption=caption)
            content = message.voice.file_id
        elif message.content_type == 'text':
            bot.send_message(FORWARD_TARGET, f"{caption}\n\n{message.text}")
            content = message.text
        # Log forwarded message
        log_forward(sender_name, msg_type, content, timestamp)
        bot.send_message(message.chat.id, "‚úÖ Your message has been forwarded and logged!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Failed to forward: {e}")

# ===== Pending Messages for Confirmation =====
pending_messages = {}

@bot.message_handler(content_types=['document', 'photo', 'video', 'voice', 'text'])
def handle_pending(message):
    username = (message.from_user.username or "").lower()
    user = message.from_user

    # Notify admin of all activity
    msg_preview = message.text if message.content_type == 'text' else message.content_type
    notify_admin(user, f"Attempted to send {message.content_type}", msg_preview)

    if username not in [u.lower() for u in AUTHORIZED_USERS]:
        # Send warning to unauthorized user
        bot.send_message(user.id, "‚ùå You are not authorized to interact with this bot. Access denied.")
        return

    # Save message for confirmation
    pending_messages[user.id] = message
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ Forward", callback_data="confirm_forward"),
        types.InlineKeyboardButton("‚ùå Cancel", callback_data="cancel_forward")
    )
    bot.reply_to(message, "Do you want to forward this message to the channel?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_forward", "cancel_forward"])
def callback_confirm(call):
    user_id = call.from_user.id
    if user_id not in pending_messages:
        bot.answer_callback_query(call.id, "No pending message found.")
        return

    message = pending_messages.pop(user_id)
    if call.data == "confirm_forward":
        forward_content(message)
        bot.answer_callback_query(call.id, "Message forwarded successfully!")
    else:
        bot.answer_callback_query(call.id, "Message forwarding canceled.")
        bot.send_message(user_id, "‚ùå Forwarding canceled.")

# ===== Admin Commands =====
def manage_user(command, message, list_name, action):
    if not is_admin(message):
        bot.reply_to(message, f"‚ùå You are not allowed to manage {list_name}.")
        return
    try:
        username = message.text.split()[1]
        target_list = users_data[list_name]
        if action == "add":
            if username.lower() not in [u.lower() for u in target_list]:
                target_list.append(username)
                save_users(users_data)
                bot.reply_to(message, f"‚úÖ @{username} added to {list_name} successfully!")
            else:
                bot.reply_to(message, f"‚ö†Ô∏è @{username} is already in {list_name}.")
        elif action == "remove":
            if username.lower() in [u.lower() for u in target_list]:
                target_list[:] = [u for u in target_list if u.lower() != username.lower()]
                save_users(users_data)
                bot.reply_to(message, f"‚úÖ @{username} removed from {list_name} successfully!")
            else:
                bot.reply_to(message, f"‚ö†Ô∏è @{username} is not in {list_name}.")
    except IndexError:
        bot.reply_to(message, f"Usage: /{command} <username>")

@bot.message_handler(commands=['adduser'])
def add_user(message): manage_user("adduser", message, "authorized", "add")

@bot.message_handler(commands=['removeuser'])
def remove_user(message): manage_user("removeuser", message, "authorized", "remove")

@bot.message_handler(commands=['listusers'])
def list_users(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå You are not allowed to view users.")
        return
    users_list = "\n".join([f"@{u}" for u in users_data["authorized"]])
    bot.reply_to(message, f"Authorized users:\n{users_list}")

@bot.message_handler(commands=['addadmin'])
def add_admin(message): manage_user("addadmin", message, "admins", "add")

@bot.message_handler(commands=['removeadmin'])
def remove_admin(message): manage_user("removeadmin", message, "admins", "remove")

@bot.message_handler(commands=['listadmins'])
def list_admins(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå You are not allowed to view admins.")
        return
    admins_list = "\n".join([f"@{u}" for u in users_data["admins"]])
    bot.reply_to(message, f"Admins:\n{admins_list}")

# ===== Other Commands =====
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "Hey there! üëã Welcome to Nexa Net Bot.\nUse /help to see what I can do.", reply_markup=main_menu())

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, "Available commands:\n/start\n/help\n/send\n/info\n/status\n/about\n/rules\n/configs\n/support\n/donate\n"
                          "Admin commands:\n/adduser <username>\n/removeuser <username>\n/listusers\n/addadmin <username>\n/removeadmin <username>\n/listadmins")

@bot.message_handler(commands=['info'])
def info(message):
    bot.reply_to(message, "This bot connects Nexa Net with the community. I can share files, configs, and updates straight from the channel.")

@bot.message_handler(commands=['status'])
def status(message):
    bot.reply_to(message, "‚úÖ Bot is online and running smoothly.")

@bot.message_handler(commands=['about'])
def about(message):
    bot.reply_to(message, "ü§ñ I‚Äôm the official Nexa Net bot. My role is to keep you connected with configs, VPN tips, and community updates.")

@bot.message_handler(commands=['rules'])
def rules(message):
    bot.reply_to(message, "üìå Community Rules:\n1. Respect everyone.\n2. No spamming.\n3. No illegal activity.\n4. Educational use only.\nüöÄ Let‚Äôs keep Nexa Net safe and fun.")

@bot.message_handler(commands=['configs'])
def configs(message):
    bot.reply_to(message, "Here are the latest configs üîë: check pinned file is working.")

@bot.message_handler(commands=['support'])
def support(message):
    bot.reply_to(message, "Need help? Contact Admin: @nexanetadmin üí¨")

@bot.message_handler(commands=['donate'])
def donate(message):
    bot.reply_to(message, "‚ù§Ô∏è Support Nexa Net and keep us running!\nYou can donate via M-Pesa/PayPal:\nEmail: joshuasaidi120@gmail.com\nMPesa: 0113004884")

# ===== Run Bot =====
bot.infinity_polling(timeout=10, long_polling_timeout=5)
